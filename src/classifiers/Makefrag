OBJDIRS     += classifiers

LINEAR_SRC := linear_classifier.cc
LINEAR_OBJ := $(patsubst %.cc,$(OBJDIR)/classifiers/%.o,$(LINEAR_SRC))

all:	$(OBJDIR)/classifiers/client_linear

$(OBJDIR)/classifiers/client_linear: $(OBJDIR)/classifiers/test_client_linear.o $(LINEAR_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcrypto.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $^ -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcrypto\
	   -Wl,-rpath=$(NTLLIBPATH) -L$(NTLLIBPATH) -lntl -lgmp -lgf2x $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lfheutil


all:	$(OBJDIR)/classifiers/server_linear

$(OBJDIR)/classifiers/server_linear: $(OBJDIR)/classifiers/test_server_linear.o $(LINEAR_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcrypto.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $^ -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcrypto -lmath -lfheutil\
	   -Wl,-rpath=$(NTLLIBPATH) -L$(NTLLIBPATH) -lntl -lgmp -lgf2x $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lfheutil



TREE_SRC := decision_tree_classifier.cc
TREE_OBJ := $(patsubst %.cc,$(OBJDIR)/classifiers/%.o,$(TREE_SRC))

all:	$(OBJDIR)/classifiers/client_tree

$(OBJDIR)/classifiers/client_tree: $(OBJDIR)/classifiers/test_client_tree.o $(TREE_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcrypto.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $^ -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcrypto -ltree\
	   -Wl,-rpath=$(NTLLIBPATH) -L$(NTLLIBPATH) -lntl -lgmp -lgf2x $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lfheutil


all:	$(OBJDIR)/classifiers/server_tree

$(OBJDIR)/classifiers/server_tree: $(OBJDIR)/classifiers/test_server_tree.o $(TREE_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcrypto.so $(OBJDIR)/libtree.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $^ -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcrypto -ltree -lmath -lfheutil\
	   -Wl,-rpath=$(NTLLIBPATH) -L$(NTLLIBPATH) -lntl -lgmp -lgf2x $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lfheutil

NB_SRC := nb_classifier.cc
NB_OBJ := $(patsubst %.cc,$(OBJDIR)/classifiers/%.o,$(NB_SRC))

all:	$(OBJDIR)/classifiers/client_nb

$(OBJDIR)/classifiers/client_nb: $(OBJDIR)/classifiers/test_client_nb.o $(NB_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcrypto.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $^ -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcrypto -ltree\
	   -Wl,-rpath=$(NTLLIBPATH) -L$(NTLLIBPATH) -lntl -lgmp -lgf2x $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lfheutil


all:	$(OBJDIR)/classifiers/server_nb

$(OBJDIR)/classifiers/server_nb: $(OBJDIR)/classifiers/test_server_nb.o $(NB_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcrypto.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $^ -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcrypto -ltree -lmath -lfheutil\
	   -Wl,-rpath=$(NTLLIBPATH) -L$(NTLLIBPATH) -lntl -lgmp -lgf2x $(L_BOOST_SYSTEM) -ljsoncpp\
       -lprotobuf -lprotobuf_defs -lnet -lfheutil


# vim: set noexpandtab:
